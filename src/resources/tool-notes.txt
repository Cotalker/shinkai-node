
Task: Go to mycoolurl.com/data and save the response into a google doc.

--------

List of tools available in Shinkai node:

1. Fetch Doc - Fetches a document from google drive
2. Is_Even -  Checks if an integer is even
3.
4.
5.
6.
...
30. ...

--------------------

LLM Response:
[1, 4, 7, 3, 2,]

-----

Responce to LLM of the tools:

Tool #1 - {Name}
Input Grammar: {Input Argument #1 Grammar}, {Input Argument #2 Grammar}, ...

Output Grammar: ...


------

Dumb tool calls:

Toolname<{arg1, arg2, arg3}>

------

Generate shinkai tool execution json:
1. Takes list of args from the LLM tool call
2. Reads the argument_name and creates an tool input json with: `["{arg_name}": {llm_arg_value}]
3. Uses the toolkit name to find the toolkit JS script/blob in the Database.
4. Generate tool execution json:

{
    "tool_name": "...",
    "arguments": ["{arg_name}": {llm_arg_value},
}

5. Send this json string together with the JS script/blob to the NodeJS execution environment.



struct ShinkaiTool {
    toolkit_name,
    name,
    description,
    input_arguments: Vec<ShinkaiToolArgument>
    return_value: ShinkaiToolArgument
}




struct ShinkaiToolArgument {
    tool_type: ShinkaiType,
    argument_name: String,
    description: String,
    optional: boolean
}



pub trait ShinkaiType {
    fn name() -> &str;
    fn ebnf_definition() -> Option<&str>;


 

}



struct ShinkaiInteger {
    fn name() -> &str {
        "INT"
    }

    fn ebnf_definition -> &str {
        "[(0-9)+]"
    }

}


struct ShinkaiList<T> {
    fn name() -> &str {
        T.name() + "LIST"
    }

    fn ebnf_definition() -> &str {
        format!("[()+]", T.ebnf_definition)
    }


    }